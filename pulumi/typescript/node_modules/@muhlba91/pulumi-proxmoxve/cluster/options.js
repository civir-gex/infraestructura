"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Options = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages Proxmox VE Cluster Datacenter options.
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * Cluster options are global and can be imported using e.g.:
 *
 * ```sh
 * $ pulumi import proxmoxve:Cluster/options:Options options cluster
 * ```
 */
class Options extends pulumi.CustomResource {
    /**
     * Get an existing Options resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Options(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Options.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Options.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bandwidthLimitClone"] = state ? state.bandwidthLimitClone : undefined;
            resourceInputs["bandwidthLimitDefault"] = state ? state.bandwidthLimitDefault : undefined;
            resourceInputs["bandwidthLimitMigration"] = state ? state.bandwidthLimitMigration : undefined;
            resourceInputs["bandwidthLimitMove"] = state ? state.bandwidthLimitMove : undefined;
            resourceInputs["bandwidthLimitRestore"] = state ? state.bandwidthLimitRestore : undefined;
            resourceInputs["console"] = state ? state.console : undefined;
            resourceInputs["crsHa"] = state ? state.crsHa : undefined;
            resourceInputs["crsHaRebalanceOnStart"] = state ? state.crsHaRebalanceOnStart : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["emailFrom"] = state ? state.emailFrom : undefined;
            resourceInputs["haShutdownPolicy"] = state ? state.haShutdownPolicy : undefined;
            resourceInputs["httpProxy"] = state ? state.httpProxy : undefined;
            resourceInputs["keyboard"] = state ? state.keyboard : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["macPrefix"] = state ? state.macPrefix : undefined;
            resourceInputs["maxWorkers"] = state ? state.maxWorkers : undefined;
            resourceInputs["migrationCidr"] = state ? state.migrationCidr : undefined;
            resourceInputs["migrationType"] = state ? state.migrationType : undefined;
            resourceInputs["nextId"] = state ? state.nextId : undefined;
            resourceInputs["notify"] = state ? state.notify : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["bandwidthLimitClone"] = args ? args.bandwidthLimitClone : undefined;
            resourceInputs["bandwidthLimitDefault"] = args ? args.bandwidthLimitDefault : undefined;
            resourceInputs["bandwidthLimitMigration"] = args ? args.bandwidthLimitMigration : undefined;
            resourceInputs["bandwidthLimitMove"] = args ? args.bandwidthLimitMove : undefined;
            resourceInputs["bandwidthLimitRestore"] = args ? args.bandwidthLimitRestore : undefined;
            resourceInputs["console"] = args ? args.console : undefined;
            resourceInputs["crsHa"] = args ? args.crsHa : undefined;
            resourceInputs["crsHaRebalanceOnStart"] = args ? args.crsHaRebalanceOnStart : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["emailFrom"] = args ? args.emailFrom : undefined;
            resourceInputs["haShutdownPolicy"] = args ? args.haShutdownPolicy : undefined;
            resourceInputs["httpProxy"] = args ? args.httpProxy : undefined;
            resourceInputs["keyboard"] = args ? args.keyboard : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["macPrefix"] = args ? args.macPrefix : undefined;
            resourceInputs["maxWorkers"] = args ? args.maxWorkers : undefined;
            resourceInputs["migrationCidr"] = args ? args.migrationCidr : undefined;
            resourceInputs["migrationType"] = args ? args.migrationType : undefined;
            resourceInputs["nextId"] = args ? args.nextId : undefined;
            resourceInputs["notify"] = args ? args.notify : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Options.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Options = Options;
/** @internal */
Options.__pulumiType = 'proxmoxve:Cluster/options:Options';
//# sourceMappingURL=options.js.map