import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const operationsMonitoring = new proxmoxve.permission.Role("operationsMonitoring", {
 *     roleId: "operations-monitoring",
 *     privileges: ["VM.Monitor"],
 * });
 * const operationsAutomation = new proxmoxve.permission.User("operationsAutomation", {
 *     acls: [{
 *         path: "/vms/1234",
 *         propagate: true,
 *         roleId: operationsMonitoring.roleId,
 *     }],
 *     comment: "Managed by Terraform",
 *     password: "a-strong-password",
 *     userId: "operations-automation@pve",
 * });
 * ```
 *
 * ## Import
 *
 * Instances can be imported using the `user_id`, e.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import proxmoxve:Permission/user:User operations_automation operations-automation@pve
 * ```
 */
export declare class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User;
    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is User;
    /**
     * The access control list (multiple blocks supported).
     */
    readonly acls: pulumi.Output<outputs.Permission.UserAcl[] | undefined>;
    /**
     * The user comment.
     */
    readonly comment: pulumi.Output<string | undefined>;
    /**
     * The user's email address.
     */
    readonly email: pulumi.Output<string | undefined>;
    /**
     * Whether the user account is enabled.
     */
    readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The user account's expiration date (RFC 3339).
     */
    readonly expirationDate: pulumi.Output<string | undefined>;
    /**
     * The user's first name.
     */
    readonly firstName: pulumi.Output<string | undefined>;
    /**
     * The user's groups.
     */
    readonly groups: pulumi.Output<string[] | undefined>;
    /**
     * The user's keys.
     */
    readonly keys: pulumi.Output<string | undefined>;
    /**
     * The user's last name.
     */
    readonly lastName: pulumi.Output<string | undefined>;
    /**
     * The user's password. Required for PVE or PAM realms.
     */
    readonly password: pulumi.Output<string | undefined>;
    /**
     * The user identifier.
     */
    readonly userId: pulumi.Output<string>;
    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * The access control list (multiple blocks supported).
     */
    acls?: pulumi.Input<pulumi.Input<inputs.Permission.UserAcl>[]>;
    /**
     * The user comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * The user's email address.
     */
    email?: pulumi.Input<string>;
    /**
     * Whether the user account is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The user account's expiration date (RFC 3339).
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The user's first name.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The user's groups.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user's keys.
     */
    keys?: pulumi.Input<string>;
    /**
     * The user's last name.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The user's password. Required for PVE or PAM realms.
     */
    password?: pulumi.Input<string>;
    /**
     * The user identifier.
     */
    userId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The access control list (multiple blocks supported).
     */
    acls?: pulumi.Input<pulumi.Input<inputs.Permission.UserAcl>[]>;
    /**
     * The user comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * The user's email address.
     */
    email?: pulumi.Input<string>;
    /**
     * Whether the user account is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The user account's expiration date (RFC 3339).
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The user's first name.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The user's groups.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user's keys.
     */
    keys?: pulumi.Input<string>;
    /**
     * The user's last name.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The user's password. Required for PVE or PAM realms.
     */
    password?: pulumi.Input<string>;
    /**
     * The user identifier.
     */
    userId: pulumi.Input<string>;
}
