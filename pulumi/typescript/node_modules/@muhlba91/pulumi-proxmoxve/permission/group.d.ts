import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a user group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const operationsTeam = new proxmoxve.permission.Group("operationsTeam", {
 *     comment: "Managed by Terraform",
 *     groupId: "operations-team",
 * });
 * ```
 *
 * ## Import
 *
 * Instances can be imported using the `group_id`, e.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import proxmoxve:Permission/group:Group operations_team operations-team
 * ```
 */
export declare class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group;
    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Group;
    /**
     * The access control list (multiple blocks supported).
     */
    readonly acls: pulumi.Output<outputs.Permission.GroupAcl[] | undefined>;
    /**
     * The group comment.
     */
    readonly comment: pulumi.Output<string | undefined>;
    /**
     * The group identifier.
     */
    readonly groupId: pulumi.Output<string>;
    /**
     * The group members as a list of `username@realm` entries
     */
    readonly members: pulumi.Output<string[]>;
    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * The access control list (multiple blocks supported).
     */
    acls?: pulumi.Input<pulumi.Input<inputs.Permission.GroupAcl>[]>;
    /**
     * The group comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * The group identifier.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The group members as a list of `username@realm` entries
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * The access control list (multiple blocks supported).
     */
    acls?: pulumi.Input<pulumi.Input<inputs.Permission.GroupAcl>[]>;
    /**
     * The group comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * The group identifier.
     */
    groupId: pulumi.Input<string>;
}
