"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a container.
 *
 * ## Import
 *
 * Instances can be imported using the `node_name` and the `vm_id`, e.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import proxmoxve:CT/container:Container ubuntu_container first-node/1234
 * ```
 */
class Container extends pulumi.CustomResource {
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Container(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Container.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["console"] = state ? state.console : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["hookScriptFileId"] = state ? state.hookScriptFileId : undefined;
            resourceInputs["initialization"] = state ? state.initialization : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["mountPoints"] = state ? state.mountPoints : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["startOnBoot"] = state ? state.startOnBoot : undefined;
            resourceInputs["started"] = state ? state.started : undefined;
            resourceInputs["startup"] = state ? state.startup : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["timeoutClone"] = state ? state.timeoutClone : undefined;
            resourceInputs["timeoutCreate"] = state ? state.timeoutCreate : undefined;
            resourceInputs["timeoutDelete"] = state ? state.timeoutDelete : undefined;
            resourceInputs["timeoutStart"] = state ? state.timeoutStart : undefined;
            resourceInputs["timeoutUpdate"] = state ? state.timeoutUpdate : undefined;
            resourceInputs["unprivileged"] = state ? state.unprivileged : undefined;
            resourceInputs["vmId"] = state ? state.vmId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.nodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeName'");
            }
            resourceInputs["clone"] = args ? args.clone : undefined;
            resourceInputs["console"] = args ? args.console : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disk"] = args ? args.disk : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["hookScriptFileId"] = args ? args.hookScriptFileId : undefined;
            resourceInputs["initialization"] = args ? args.initialization : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["mountPoints"] = args ? args.mountPoints : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["nodeName"] = args ? args.nodeName : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["startOnBoot"] = args ? args.startOnBoot : undefined;
            resourceInputs["started"] = args ? args.started : undefined;
            resourceInputs["startup"] = args ? args.startup : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["timeoutClone"] = args ? args.timeoutClone : undefined;
            resourceInputs["timeoutCreate"] = args ? args.timeoutCreate : undefined;
            resourceInputs["timeoutDelete"] = args ? args.timeoutDelete : undefined;
            resourceInputs["timeoutStart"] = args ? args.timeoutStart : undefined;
            resourceInputs["timeoutUpdate"] = args ? args.timeoutUpdate : undefined;
            resourceInputs["unprivileged"] = args ? args.unprivileged : undefined;
            resourceInputs["vmId"] = args ? args.vmId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Container.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Container = Container;
/** @internal */
Container.__pulumiType = 'proxmoxve:CT/container:Container';
//# sourceMappingURL=container.js.map