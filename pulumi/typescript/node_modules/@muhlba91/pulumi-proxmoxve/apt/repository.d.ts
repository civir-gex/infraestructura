import * as pulumi from "@pulumi/pulumi";
/**
 * Manages an APT repository of a Proxmox VE node.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.apt.Repository("example", {
 *     enabled: true,
 *     filePath: "/etc/apt/sources.list",
 *     index: 0,
 *     node: "pve",
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * An APT repository can be imported using a comma-separated list consisting of the name of the Proxmox VE node,
 *
 * the absolute source list file path, and the index in the exact same order, e.g.:
 *
 * ```sh
 * $ pulumi import proxmoxve:Apt/repository:Repository example pve,/etc/apt/sources.list,0
 * ```
 */
export declare class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository;
    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Repository;
    /**
     * The associated comment.
     */
    readonly comment: pulumi.Output<string>;
    /**
     * The list of components.
     */
    readonly components: pulumi.Output<string[]>;
    /**
     * Indicates the activation status.
     */
    readonly enabled: pulumi.Output<boolean>;
    /**
     * The absolute path of the source list file that contains this repository.
     */
    readonly filePath: pulumi.Output<string>;
    /**
     * The format of the defining source list file.
     */
    readonly fileType: pulumi.Output<string>;
    /**
     * The index within the defining source list file.
     */
    readonly index: pulumi.Output<number>;
    /**
     * The name of the target Proxmox VE node.
     */
    readonly node: pulumi.Output<string>;
    /**
     * The list of package types.
     */
    readonly packageTypes: pulumi.Output<string[]>;
    /**
     * The list of package distributions.
     */
    readonly suites: pulumi.Output<string[]>;
    /**
     * The list of repository URIs.
     */
    readonly uris: pulumi.Output<string[]>;
    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * The associated comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * The list of components.
     */
    components?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates the activation status.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The absolute path of the source list file that contains this repository.
     */
    filePath?: pulumi.Input<string>;
    /**
     * The format of the defining source list file.
     */
    fileType?: pulumi.Input<string>;
    /**
     * The index within the defining source list file.
     */
    index?: pulumi.Input<number>;
    /**
     * The name of the target Proxmox VE node.
     */
    node?: pulumi.Input<string>;
    /**
     * The list of package types.
     */
    packageTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of package distributions.
     */
    suites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of repository URIs.
     */
    uris?: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * Indicates the activation status.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The absolute path of the source list file that contains this repository.
     */
    filePath: pulumi.Input<string>;
    /**
     * The index within the defining source list file.
     */
    index: pulumi.Input<number>;
    /**
     * The name of the target Proxmox VE node.
     */
    node: pulumi.Input<string>;
}
