"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.vm = exports.user = exports.types = exports.storage = exports.permission = exports.network = exports.hardware = exports.ha = exports.download = exports.ct = exports.config = exports.cluster = exports.apt = exports.Vm2 = exports.Time = exports.Provider = exports.Hosts = exports.getVm2Output = exports.getVm2 = exports.getNodeOutput = exports.getNode = exports.DNS = exports.Certifi = exports.Acl = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Acl = null;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));
exports.Certifi = null;
utilities.lazyLoad(exports, ["Certifi"], () => require("./certifi"));
exports.DNS = null;
utilities.lazyLoad(exports, ["DNS"], () => require("./dns"));
exports.getNode = null;
exports.getNodeOutput = null;
utilities.lazyLoad(exports, ["getNode", "getNodeOutput"], () => require("./getNode"));
exports.getVm2 = null;
exports.getVm2Output = null;
utilities.lazyLoad(exports, ["getVm2", "getVm2Output"], () => require("./getVm2"));
exports.Hosts = null;
utilities.lazyLoad(exports, ["Hosts"], () => require("./hosts"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.Time = null;
utilities.lazyLoad(exports, ["Time"], () => require("./time"));
exports.Vm2 = null;
utilities.lazyLoad(exports, ["Vm2"], () => require("./vm2"));
// Export sub-modules:
const apt = require("./apt");
exports.apt = apt;
const cluster = require("./cluster");
exports.cluster = cluster;
const config = require("./config");
exports.config = config;
const ct = require("./ct");
exports.ct = ct;
const download = require("./download");
exports.download = download;
const ha = require("./ha");
exports.ha = ha;
const hardware = require("./hardware");
exports.hardware = hardware;
const network = require("./network");
exports.network = network;
const permission = require("./permission");
exports.permission = permission;
const storage = require("./storage");
exports.storage = storage;
const types = require("./types");
exports.types = types;
const user = require("./user");
exports.user = user;
const vm = require("./vm");
exports.vm = vm;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "proxmoxve:index/acl:Acl":
                return new exports.Acl(name, undefined, { urn });
            case "proxmoxve:index/certifi:Certifi":
                return new exports.Certifi(name, undefined, { urn });
            case "proxmoxve:index/dNS:DNS":
                return new exports.DNS(name, undefined, { urn });
            case "proxmoxve:index/hosts:Hosts":
                return new exports.Hosts(name, undefined, { urn });
            case "proxmoxve:index/time:Time":
                return new exports.Time(name, undefined, { urn });
            case "proxmoxve:index/vm2:Vm2":
                return new exports.Vm2(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("proxmoxve", "index/acl", _module);
pulumi.runtime.registerResourceModule("proxmoxve", "index/certifi", _module);
pulumi.runtime.registerResourceModule("proxmoxve", "index/dNS", _module);
pulumi.runtime.registerResourceModule("proxmoxve", "index/hosts", _module);
pulumi.runtime.registerResourceModule("proxmoxve", "index/time", _module);
pulumi.runtime.registerResourceModule("proxmoxve", "index/vm2", _module);
pulumi.runtime.registerResourcePackage("proxmoxve", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:proxmoxve") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map