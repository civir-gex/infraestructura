"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DNS = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages the DNS configuration for a specific node.
 *
 * ## Import
 *
 * Instances can be imported using the `node_name`, e.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import proxmoxve:index/dNS:DNS first_node first-node
 * ```
 */
class DNS extends pulumi.CustomResource {
    /**
     * Get an existing DNS resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DNS(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DNS.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DNS.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.nodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeName'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["nodeName"] = args ? args.nodeName : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DNS.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DNS = DNS;
/** @internal */
DNS.__pulumiType = 'proxmoxve:index/dNS:DNS';
//# sourceMappingURL=dns.js.map