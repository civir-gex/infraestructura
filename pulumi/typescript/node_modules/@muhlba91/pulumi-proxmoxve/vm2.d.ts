import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * @deprecated proxmoxve.index/vm2.Vm2 has been deprecated in favor of proxmoxve.vm/virtualmachine2.VirtualMachine2
 */
export declare class Vm2 extends pulumi.CustomResource {
    /**
     * Get an existing Vm2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vm2State, opts?: pulumi.CustomResourceOptions): Vm2;
    /**
     * Returns true if the given object is an instance of Vm2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Vm2;
    /**
     * The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is
     * the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.
     */
    readonly cdrom: pulumi.Output<{
        [key: string]: outputs.Vm2Cdrom;
    }>;
    /**
     * The cloning configuration.
     */
    readonly clone: pulumi.Output<outputs.Vm2Clone | undefined>;
    /**
     * The CPU configuration.
     */
    readonly cpu: pulumi.Output<outputs.Vm2Cpu>;
    /**
     * The description of the VM.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the VM. Doesn't have to be unique.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The name of the node where the VM is provisioned.
     */
    readonly nodeName: pulumi.Output<string>;
    /**
     * Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).
     */
    readonly stopOnDestroy: pulumi.Output<boolean>;
    /**
     * The tags assigned to the VM.
     */
    readonly tags: pulumi.Output<string[]>;
    /**
     * Set to true to create a VM template.
     */
    readonly template: pulumi.Output<boolean | undefined>;
    readonly timeouts: pulumi.Output<outputs.Vm2Timeouts | undefined>;
    /**
     * Configure the VGA Hardware. If you want to use high resolution modes (>= 1280x1024x16) you may need to increase the vga
     * memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP
     * and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many
     * independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using
     * a serial device as terminal. See the [Proxmox
     * documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for
     * more information and available configuration parameters.
     */
    readonly vga: pulumi.Output<outputs.Vm2Vga>;
    /**
     * Create a Vm2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated proxmoxve.index/vm2.Vm2 has been deprecated in favor of proxmoxve.vm/virtualmachine2.VirtualMachine2 */
    constructor(name: string, args: Vm2Args, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Vm2 resources.
 */
export interface Vm2State {
    /**
     * The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is
     * the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.
     */
    cdrom?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.Vm2Cdrom>;
    }>;
    /**
     * The cloning configuration.
     */
    clone?: pulumi.Input<inputs.Vm2Clone>;
    /**
     * The CPU configuration.
     */
    cpu?: pulumi.Input<inputs.Vm2Cpu>;
    /**
     * The description of the VM.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the VM. Doesn't have to be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the node where the VM is provisioned.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).
     */
    stopOnDestroy?: pulumi.Input<boolean>;
    /**
     * The tags assigned to the VM.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to true to create a VM template.
     */
    template?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.Vm2Timeouts>;
    /**
     * Configure the VGA Hardware. If you want to use high resolution modes (>= 1280x1024x16) you may need to increase the vga
     * memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP
     * and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many
     * independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using
     * a serial device as terminal. See the [Proxmox
     * documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for
     * more information and available configuration parameters.
     */
    vga?: pulumi.Input<inputs.Vm2Vga>;
}
/**
 * The set of arguments for constructing a Vm2 resource.
 */
export interface Vm2Args {
    /**
     * The CD-ROM configuration. The key is the interface of the CD-ROM, could be one of `ideN`, `sataN`, `scsiN`, where N is
     * the index of the interface. Note that `q35` machine type only supports `ide0` and `ide2` of IDE interfaces.
     */
    cdrom?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.Vm2Cdrom>;
    }>;
    /**
     * The cloning configuration.
     */
    clone?: pulumi.Input<inputs.Vm2Clone>;
    /**
     * The CPU configuration.
     */
    cpu?: pulumi.Input<inputs.Vm2Cpu>;
    /**
     * The description of the VM.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the VM. Doesn't have to be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the node where the VM is provisioned.
     */
    nodeName: pulumi.Input<string>;
    /**
     * Set to true to stop (rather than shutdown) the VM on destroy (defaults to `false`).
     */
    stopOnDestroy?: pulumi.Input<boolean>;
    /**
     * The tags assigned to the VM.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to true to create a VM template.
     */
    template?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.Vm2Timeouts>;
    /**
     * Configure the VGA Hardware. If you want to use high resolution modes (>= 1280x1024x16) you may need to increase the vga
     * memory option. Since QEMU 2.9 the default VGA display type is `std` for all OS types besides some Windows versions (XP
     * and older) which use `cirrus`. The `qxl` option enables the SPICE display server. For win* OS you can select how many
     * independent displays you want, Linux guests can add displays themself. You can also run without any graphic card, using
     * a serial device as terminal. See the [Proxmox
     * documentation](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#qm_virtual_machines_settings) section 10.2.8 for
     * more information and available configuration parameters.
     */
    vga?: pulumi.Input<inputs.Vm2Vga>;
}
