import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * An IPSet allows us to group multiple IP addresses, IP subnets and aliases. Aliases can be
 * created on the cluster level, on VM / Container level.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const ipset = new proxmoxve.network.FirewallIPSet("ipset", {
 *     nodeName: proxmox_virtual_environment_vm.example.node_name,
 *     vmId: proxmox_virtual_environment_vm.example.vm_id,
 *     comment: "Managed by Terraform",
 *     cidrs: [
 *         {
 *             name: "192.168.0.0/23",
 *             comment: "Local network 1",
 *         },
 *         {
 *             name: "192.168.0.1",
 *             comment: "Server 1",
 *             nomatch: true,
 *         },
 *         {
 *             name: "192.168.2.1",
 *             comment: "Server 1",
 *         },
 *     ],
 * }, {
 *     dependsOn: [proxmox_virtual_environment_vm.example],
 * });
 * ```
 */
export declare class FirewallIPSet extends pulumi.CustomResource {
    /**
     * Get an existing FirewallIPSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallIPSetState, opts?: pulumi.CustomResourceOptions): FirewallIPSet;
    /**
     * Returns true if the given object is an instance of FirewallIPSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FirewallIPSet;
    /**
     * IP/CIDR block (multiple blocks supported).
     */
    readonly cidrs: pulumi.Output<outputs.Network.FirewallIPSetCidr[] | undefined>;
    /**
     * IPSet comment.
     */
    readonly comment: pulumi.Output<string | undefined>;
    /**
     * Container ID. Leave empty for cluster level aliases.
     */
    readonly containerId: pulumi.Output<number | undefined>;
    /**
     * IPSet name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Node name. Leave empty for cluster level aliases.
     */
    readonly nodeName: pulumi.Output<string | undefined>;
    /**
     * VM ID. Leave empty for cluster level aliases.
     */
    readonly vmId: pulumi.Output<number | undefined>;
    /**
     * Create a FirewallIPSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallIPSetArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering FirewallIPSet resources.
 */
export interface FirewallIPSetState {
    /**
     * IP/CIDR block (multiple blocks supported).
     */
    cidrs?: pulumi.Input<pulumi.Input<inputs.Network.FirewallIPSetCidr>[]>;
    /**
     * IPSet comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Container ID. Leave empty for cluster level aliases.
     */
    containerId?: pulumi.Input<number>;
    /**
     * IPSet name.
     */
    name?: pulumi.Input<string>;
    /**
     * Node name. Leave empty for cluster level aliases.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * VM ID. Leave empty for cluster level aliases.
     */
    vmId?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a FirewallIPSet resource.
 */
export interface FirewallIPSetArgs {
    /**
     * IP/CIDR block (multiple blocks supported).
     */
    cidrs?: pulumi.Input<pulumi.Input<inputs.Network.FirewallIPSetCidr>[]>;
    /**
     * IPSet comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Container ID. Leave empty for cluster level aliases.
     */
    containerId?: pulumi.Input<number>;
    /**
     * IPSet name.
     */
    name?: pulumi.Input<string>;
    /**
     * Node name. Leave empty for cluster level aliases.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * VM ID. Leave empty for cluster level aliases.
     */
    vmId?: pulumi.Input<number>;
}
