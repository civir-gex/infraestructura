"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Firewall = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages firewall options on the cluster level.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.network.Firewall("example", {
 *     ebtables: false,
 *     enabled: false,
 *     inputPolicy: "DROP",
 *     logRatelimit: {
 *         burst: 10,
 *         enabled: false,
 *         rate: "5/second",
 *     },
 *     outputPolicy: "ACCEPT",
 * });
 * ```
 *
 * ## Important Notes
 *
 * Be careful not to use this resource multiple times for the same node.
 *
 * ## Import
 *
 * Instances can be imported without an ID, but you still need to pass one, e.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import proxmoxve:Network/firewall:Firewall example example
 * ```
 */
class Firewall extends pulumi.CustomResource {
    /**
     * Get an existing Firewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Firewall(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Firewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Firewall.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["ebtables"] = state ? state.ebtables : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["inputPolicy"] = state ? state.inputPolicy : undefined;
            resourceInputs["logRatelimit"] = state ? state.logRatelimit : undefined;
            resourceInputs["outputPolicy"] = state ? state.outputPolicy : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["ebtables"] = args ? args.ebtables : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["inputPolicy"] = args ? args.inputPolicy : undefined;
            resourceInputs["logRatelimit"] = args ? args.logRatelimit : undefined;
            resourceInputs["outputPolicy"] = args ? args.outputPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Firewall.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Firewall = Firewall;
/** @internal */
Firewall.__pulumiType = 'proxmoxve:Network/firewall:Firewall';
//# sourceMappingURL=firewall.js.map