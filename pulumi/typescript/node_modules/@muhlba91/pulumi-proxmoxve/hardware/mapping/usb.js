"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Usb = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Manages a USB hardware mapping in a Proxmox VE cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as proxmoxve from "@muhlba91/pulumi-proxmoxve";
 *
 * const example = new proxmoxve.hardware.mapping.Usb("example", {
 *     comment: "This is a comment",
 *     maps: [{
 *         comment: "This is a device specific comment",
 *         id: "8087:0a2b",
 *         node: "pve",
 *         path: "1-8.2",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * #!/usr/bin/env sh
 *
 * A USB hardware mapping can be imported using their name, e.g.:
 *
 * ```sh
 * $ pulumi import proxmoxve:Hardware/mapping/usb:Usb example example
 * ```
 */
class Usb extends pulumi.CustomResource {
    /**
     * Get an existing Usb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Usb(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Usb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Usb.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["maps"] = state ? state.maps : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.maps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maps'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["maps"] = args ? args.maps : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Usb.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Usb = Usb;
/** @internal */
Usb.__pulumiType = 'proxmoxve:Hardware/mapping/usb:Usb';
//# sourceMappingURL=usb.js.map